module IUP
  @[Link("X11")]
  @[Link("gtk+-2.0")]
  @[Link("gdk-2.0")]
  @[Link("iup")]
  lib LibIUP
    IUP_NAME           = "IUP - Portable User Interface"
    IUP_DESCRIPTION    = "Multi-platform Toolkit for Building Graphical User Interfaces"
    IUP_COPYRIGHT      = "Copyright (C) 1994-2019 Tecgraf/PUC-Rio"
    IUP_VERSION        = "3.26"
    IUP_VERSION_NUMBER = 326000
    IUP_VERSION_DATE   = "2019/01/07"
    IUP_ERROR          =      1
    IUP_NOERROR        =    0o0
    IUP_OPENED         =     -1
    IUP_INVALID        =     -1
    IUP_INVALID_ID     =    -10
    IUP_IGNORE         =     -1
    IUP_DEFAULT        =     -2
    IUP_CLOSE          =     -3
    IUP_CONTINUE       =     -4
    IUP_CENTER         = 0xFFFF
    IUP_LEFT           = 0xFFFE
    IUP_RIGHT          = 0xFFFD
    IUP_MOUSEPOS       = 0xFFFC
    IUP_CURRENT        = 0xFFFB
    IUP_CENTERPARENT   = 0xFFFA
    IUP_TOP            = IUP_LEFT
    IUP_BOTTOM         = IUP_RIGHT
    IUP_BUTTON1        = '1'
    IUP_BUTTON2        = '2'
    IUP_BUTTON3        = '3'
    IUP_BUTTON4        = '4'
    IUP_BUTTON5        = '5'
    #   iup_isshift =  _s)( _s[0]=='S'
    #   iup_iscontrol =  _s)( _s[1]=='C'
    #   iup_isbutton1 =  _s)( _s[2]=='1'
    #   iup_isbutton2 =  _s)( _s[3]=='2'
    #   iup_isbutton3 =  _s)( _s[4]=='3'
    #   iup_isdouble =  _s)( _s[5]=='D'
    #   iup_isalt =  _s)( _s[6]=='A'
    #   iup_issys =  _s)( _s[7]=='Y'
    #   iup_isbutton4 =  _s)( _s[8]=='4'
    #   iup_isbutton5 =  _s)( _s[9]=='5'
    # isshift = iup_isshift
    # iscontrol = iup_iscontrol
    # isbutton1 = iup_isbutton1
    # isbutton2 = iup_isbutton2
    # isbutton3 = iup_isbutton3
    # isdouble = iup_isdouble
    # isalt = iup_isalt
    # issys = iup_issys
    # isbutton4 = iup_isbutton4
    # isbutton5 = iup_isbutton5
    IUP_MASK_FLOAT       = "[+/-]?(/d+/.?/d*|/./d+)"
    IUP_MASK_UFLOAT      = "(/d+/.?/d*|/./d+)"
    IUP_MASK_EFLOAT      = "[+/-]?(/d+/.?/d*|/./d+)([eE][+/-]?/d+)?"
    IUP_MASK_UEFLOAT     = "(/d+/.?/d*|/./d+)([eE][+/-]?/d+)?"
    IUP_MASK_FLOATCOMMA  = "[+/-]?(/d+/,?/d*|/,/d+)"
    IUP_MASK_UFLOATCOMMA = "(/d+/,?/d*|/,/d+)"
    IUP_MASK_INT         = "[+/-]?/d+"
    IUP_MASK_UINT        = "/d+"
    IUPMASK_FLOAT        = IUP_MASK_FLOAT
    IUPMASK_UFLOAT       = IUP_MASK_UFLOAT
    IUPMASK_EFLOAT       = IUP_MASK_EFLOAT
    IUPMASK_INT          = IUP_MASK_INT
    IUPMASK_UINT         = IUP_MASK_UINT
    IUP_GETPARAM_BUTTON1 = -1
    IUP_GETPARAM_INIT    = -2
    IUP_GETPARAM_BUTTON2 = -3
    IUP_GETPARAM_BUTTON3 = -4
    IUP_GETPARAM_CLOSE   = -5
    IUP_GETPARAM_MAP     = -6
    IUP_GETPARAM_OK      = IUP_GETPARAM_BUTTON1
    IUP_GETPARAM_CANCEL  = IUP_GETPARAM_BUTTON2
    IUP_GETPARAM_HELP    = IUP_GETPARAM_BUTTON3
    IUP_PRIMARY          = -1
    IUP_SECONDARY        = -2
    type Handle = Void
    alias Icallback = (Handle*) -> LibC::Int*
    fun open = IupOpen(LibC::Int*, LibC::Char***) : LibC::Int
    fun close = IupClose() : Void
    fun image_lib_open = IupImageLibOpen() : Void
    fun mainloop = IupMainLoop() : LibC::Int
    fun loop_step = IupLoopStep() : LibC::Int
    fun loop_step_wait = IupLoopStepWait() : LibC::Int
    fun main_loop_level = IupMainLoopLevel() : LibC::Int
    fun flush = IupFlush() : Void
    fun exit_loop = IupExitLoop() : Void
    fun record_input = IupRecordInput(LibC::Char*, LibC::Int) : LibC::Int
    fun play_input = IupPlayInput(LibC::Char*) : LibC::Int
    fun update = IupUpdate(Handle*) : Void
    fun update_children = IupUpdateChildren(Handle*) : Void
    fun redraw = IupRedraw(Handle*, LibC::Int) : Void
    fun refresh = IupRefresh(Handle*) : Void
    fun refresh_children = IupRefreshChildren(Handle*) : Void
    fun execute = IupExecute(LibC::Char*, LibC::Char*) : LibC::Int
    fun execute_wait = IupExecuteWait(LibC::Char*, LibC::Char*) : LibC::Int
    fun help = IupHelp(LibC::Char*) : LibC::Int
    fun log = IupLog(LibC::Char*, LibC::Char*) : Void
    fun load = IupLoad(LibC::Char*) : LibC::Char*
    fun load_buffer = IupLoadBuffer(LibC::Char*) : LibC::Char*
    fun version = IupVersion() : LibC::Char*
    fun version_date = IupVersionDate() : LibC::Char*
    fun version_number = IupVersionNumber() : LibC::Int
    fun set_language = IupSetLanguage(LibC::Char*) : Void
    fun get_language = IupGetLanguage() : LibC::Char*
    fun set_language_string = IupSetLanguageString(LibC::Char*, LibC::Char*) : Void
    fun storelanguage_string = IupStoreLanguageString(LibC::Char*, LibC::Char*) : Void
    fun get_language_string = IupGetLanguageString(LibC::Char*) : LibC::Char*
    fun set_language_pack = IupSetLanguagePack(Handle*) : Void
    fun destroy = IupDestroy(Handle*) : Void
    fun detach = IupDetach(Handle*) : Void
    fun append = IupAppend(Handle*, Handle*) : Handle*
    fun insert = IupInsert(Handle*, Handle*, Handle*) : Handle*
    fun get_child = IupGetChild(Handle*, LibC::Int) : Handle*
    fun get_childpos = IupGetChildPos(Handle*, Handle*) : LibC::Int
    fun get_childcount = IupGetChildCount(Handle*) : LibC::Int
    fun get_nextchild = IupGetNextChild(Handle*, Handle*) : Handle*
    fun get_brother = IupGetBrother(Handle*) : Handle*
    fun get_parent = IupGetParent(Handle*) : Handle*
    fun get_dialog = IupGetDialog(Handle*) : Handle*
    fun get_dialogchild = IupGetDialogChild(Handle*, LibC::Char*) : Handle*
    fun reparent = IupReparent(Handle*, Handle*, Handle*) : LibC::Int
    fun popup = IupPopup(Handle*, LibC::Int, LibC::Int) : LibC::Int
    fun show = IupShow(Handle*) : LibC::Int
    fun showxy = IupShowXY(Handle*, LibC::Int, LibC::Int) : LibC::Int
    fun hide = IupHide(Handle*) : LibC::Int
    fun map = IupMap(Handle*) : LibC::Int
    fun unmap = IupUnmap(Handle*) : Void
    fun reset_attribute = IupResetAttribute(Handle*, LibC::Char*) : Void
    fun get_allattributes = IupGetAllAttributes(Handle*, LibC::Char**, LibC::Int) : LibC::Int
    fun copy_attributes = IupCopyAttributes(Handle*, Handle*) : Void
    fun set_att = IupSetAtt(LibC::Char*, Handle*, LibC::Char*) : Handle*
    fun set_attributes = IupSetAttributes(Handle*, LibC::Char*) : Handle*
    fun get_attributes = IupGetAttributes(Handle*) : LibC::Char*
    fun set_attribute = IupSetAttribute(Handle*, LibC::Char*, LibC::Char*) : Void
    fun set_strattribute = IupSetStrAttribute(Handle*, LibC::Char*, LibC::Char*) : Void
    fun set_strf = IupSetStrf(Handle*, LibC::Char*, LibC::Char*) : Void
    fun set_int = IupSetInt(Handle*, LibC::Char*, LibC::Int) : Void
    fun set_float = IupSetFloat(Handle*, LibC::Char*, LibC::Float) : Void
    fun set_double = IupSetDouble(Handle*, LibC::Char*, LibC::Double) : Void
    fun set_rgb = IupSetRGB(Handle*, LibC::Char*, LibC::Char, LibC::Char, LibC::Char) : Void
    fun get_attribute = IupGetAttribute(Handle*, LibC::Char*) : LibC::Char*
    fun get_int = IupGetInt(Handle*, LibC::Char*) : LibC::Int
    fun get_int2 = IupGetInt2(Handle*, LibC::Char*) : LibC::Int
    fun get_intint = IupGetIntInt(Handle*, LibC::Char*, LibC::Int*, LibC::Int*) : LibC::Int
    fun get_float = IupGetFloat(Handle*, LibC::Char*) : LibC::Float
    fun get_double = IupGetDouble(Handle*, LibC::Char*) : LibC::Double
    fun get_rgb = IupGetRGB(Handle*, LibC::Char*, LibC::Char*, LibC::Char*, LibC::Char*) : Void
    fun set_attribute_id = IupSetAttributeId(Handle*, LibC::Char*, LibC::Int, LibC::Char*) : Void
    fun set_str_attribute_id = IupSetStrAttributeId(Handle*, LibC::Char*, LibC::Int, LibC::Char*) : Void
    fun set_strf_id = IupSetStrfId(Handle*, LibC::Char*, LibC::Int, LibC::Char*) : Void
    fun set_int_id = IupSetIntId(Handle*, LibC::Char*, LibC::Int, LibC::Int) : Void
    fun set_float_id = IupSetFloatId(Handle*, LibC::Char*, LibC::Int, LibC::Float) : Void
    fun set_double_id = IupSetDoubleId(Handle*, LibC::Char*, LibC::Int, LibC::Double) : Void
    fun set_rgb_id = IupSetRGBId(Handle*, LibC::Char*, LibC::Int, LibC::Char, LibC::Char, LibC::Char) : Void
    fun get_attribute_id = IupGetAttributeId(Handle*, LibC::Char*, LibC::Int) : LibC::Char*
    fun get_int_id = IupGetIntId(Handle*, LibC::Char*, LibC::Int) : LibC::Int
    fun get_float_id = IupGetFloatId(Handle*, LibC::Char*, LibC::Int) : LibC::Float
    fun get_double_id = IupGetDoubleId(Handle*, LibC::Char*, LibC::Int) : LibC::Double
    fun get_rgb_id = IupGetRGBId(Handle*, LibC::Char*, LibC::Int, LibC::Char*, LibC::Char*, LibC::Char*) : Void
    fun set_attribute_id2 = IupSetAttributeId2(Handle*, LibC::Char*, LibC::Int, LibC::Int, LibC::Char*) : Void
    fun set_str_attribute_id2 = IupSetStrAttributeId2(Handle*, LibC::Char*, LibC::Int, LibC::Int, LibC::Char*) : Void
    fun set_strf_id_2 = IupSetStrfId2(Handle*, LibC::Char*, LibC::Int, LibC::Int, LibC::Char*) : Void
    fun set_int_id_2 = IupSetIntId2(Handle*, LibC::Char*, LibC::Int, LibC::Int, LibC::Int) : Void
    fun set_float_id_2 = IupSetFloatId2(Handle*, LibC::Char*, LibC::Int, LibC::Int, LibC::Float) : Void
    fun set_double_id_2 = IupSetDoubleId2(Handle*, LibC::Char*, LibC::Int, LibC::Int, LibC::Double) : Void
    fun set_rgb_id_2 = IupSetRGBId2(Handle*, LibC::Char*, LibC::Int, LibC::Int, LibC::Char, LibC::Char, LibC::Char) : Void
    fun get_attribute_id2 = IupGetAttributeId2(Handle*, LibC::Char*, LibC::Int, LibC::Int) : LibC::Char*
    fun get_int_id_2 = IupGetIntId2(Handle*, LibC::Char*, LibC::Int, LibC::Int) : LibC::Int
    fun get_float_id_2 = IupGetFloatId2(Handle*, LibC::Char*, LibC::Int, LibC::Int) : LibC::Float
    fun get_double_id_2 = IupGetDoubleId2(Handle*, LibC::Char*, LibC::Int, LibC::Int) : LibC::Double
    fun get_rgb_id_2 = IupGetRGBId2(Handle*, LibC::Char*, LibC::Int, LibC::Int, LibC::Char*, LibC::Char*, LibC::Char*) : Void
    fun set_global = IupSetGlobal(LibC::Char*, LibC::Char*) : Void
    fun set_strglobal = IupSetStrGlobal(LibC::Char*, LibC::Char*) : Void
    fun get_global = IupGetGlobal(LibC::Char*) : LibC::Char*
    fun set_focus = IupSetFocus(Handle*) : Handle*
    fun get_focus = IupGetFocus() : Handle*
    fun previous_field = IupPreviousField(Handle*) : Handle*
    fun next_field = IupNextField(Handle*) : Handle*
    fun get_callback = IupGetCallback(Handle*, LibC::Char*) : Icallback
    fun set_callback = IupSetCallback(Handle*, LibC::Char*, Icallback) : Icallback
    fun set_callbacks = IupSetCallbacks(Handle*, LibC::Char*, Icallback) : Handle*
    fun get_function = IupGetFunction(LibC::Char*) : Icallback
    fun set_function = IupSetFunction(LibC::Char*, Icallback) : Icallback
    fun get_handle = IupGetHandle(LibC::Char*) : Handle*
    fun set_handle = IupSetHandle(LibC::Char*, Handle*) : Handle*
    fun get_allnames = IupGetAllNames(LibC::Char**, LibC::Int) : LibC::Int
    fun get_alldialogs = IupGetAllDialogs(LibC::Char**, LibC::Int) : LibC::Int
    fun get_name = IupGetName(Handle*) : LibC::Char*
    fun set_attribute_handle = IupSetAttributeHandle(Handle*, LibC::Char*, Handle*) : Void
    fun get_attribute_handle = IupGetAttributeHandle(Handle*, LibC::Char*) : Handle*
    fun set_attribute_handle_id = IupSetAttributeHandleId(Handle*, LibC::Char*, LibC::Int, Handle*) : Void
    fun get_attribute_handle_id = IupGetAttributeHandleId(Handle*, LibC::Char*, LibC::Int) : Handle*
    fun set_attribute_handle_id_2 = IupSetAttributeHandleId2(Handle*, LibC::Char*, LibC::Int, LibC::Int, Handle*) : Void
    fun get_attribute_handle_id_2 = IupGetAttributeHandleId2(Handle*, LibC::Char*, LibC::Int, LibC::Int) : Handle*
    fun get_class_name = IupGetClassName(Handle*) : LibC::Char*
    fun get_class_type = IupGetClassType(Handle*) : LibC::Char*
    fun get_all_classes = IupGetAllClasses(LibC::Char**, LibC::Int) : LibC::Int
    fun get_class_attributes = IupGetClassAttributes(LibC::Char*, LibC::Char**, LibC::Int) : LibC::Int
    fun get_class_callbacks = IupGetClassCallbacks(LibC::Char*, LibC::Char**, LibC::Int) : LibC::Int
    fun save_class_attributes = IupSaveClassAttributes(Handle*) : Void
    fun copy_class_attributes = IupCopyClassAttributes(Handle*, Handle*) : Void
    fun set_class_default_attribute = IupSetClassDefaultAttribute(LibC::Char*, LibC::Char*, LibC::Char*) : Void
    fun class_match = IupClassMatch(Handle*, LibC::Char*) : LibC::Int
    fun create = IupCreate(LibC::Char*) : Handle*
    fun createv = IupCreatev(LibC::Char*, Void**) : Handle*
    fun createp = IupCreatep(LibC::Char*, Void*) : Handle*
    fun fill = IupFill() : Handle*
    fun space = IupSpace() : Handle*
    fun radio = IupRadio(Handle*) : Handle*
    fun vbox = IupVbox(Handle*) : Handle*
    fun vboxv = IupVboxv(Handle**) : Handle*
    fun zbox = IupZbox(Handle*) : Handle*
    fun zboxv = IupZboxv(Handle**) : Handle*
    fun hbox = IupHbox(Handle*) : Handle*
    fun hboxv = IupHboxv(Handle**) : Handle*
    fun normalizer = IupNormalizer(Handle*) : Handle*
    fun normalizerv = IupNormalizerv(Handle**) : Handle*
    fun cbox = IupCbox(Handle*) : Handle*
    fun cboxv = IupCboxv(Handle**) : Handle*
    fun sbox = IupSbox(Handle*) : Handle*
    fun split = IupSplit(Handle*, Handle*) : Handle*
    fun scroll_box = IupScrollBox(Handle*) : Handle*
    fun flat_scroll_box = IupFlatScrollBox(Handle*) : Handle*
    fun grid_box = IupGridBox(Handle*) : Handle*
    fun grid_boxv = IupGridBoxv(Handle**) : Handle*
    fun multi_box = IupMultiBox(Handle*) : Handle*
    fun multi_boxv = IupMultiBoxv(Handle**) : Handle*
    fun expander = IupExpander(Handle*) : Handle*
    fun detach_box = IupDetachBox(Handle*) : Handle*
    fun background_box = IupBackgroundBox(Handle*) : Handle*
    fun frame = IupFrame(Handle*) : Handle*
    fun flat_frame = IupFlatFrame(Handle*) : Handle*
    fun image = IupImage(LibC::Int, LibC::Int, LibC::Char*) : Handle*
    fun image_rgb = IupImageRGB(LibC::Int, LibC::Int, LibC::Char*) : Handle*
    fun image_rgba = IupImageRGBA(LibC::Int, LibC::Int, LibC::Char*) : Handle*
    fun item = IupItem(LibC::Char*, LibC::Char*) : Handle*
    fun submenu = IupSubmenu(LibC::Char*, Handle*) : Handle*
    fun separator = IupSeparator() : Handle*
    fun menu = IupMenu(Handle*) : Handle*
    fun menuv = IupMenuv(Handle**) : Handle*
    fun button = IupButton(LibC::Char*, LibC::Char*) : Handle*
    fun flat_button = IupFlatButton(LibC::Char*) : Handle*
    fun flat_toggle = IupFlatToggle(LibC::Char*) : Handle*
    fun drop_button = IupDropButton(Handle*) : Handle*
    fun flat_label = IupFlatLabel(LibC::Char*) : Handle*
    fun flat_separator = IupFlatSeparator() : Handle*
    fun canvas = IupCanvas(LibC::Char*) : Handle*
    fun dialog = IupDialog(Handle*) : Handle*
    fun user = IupUser() : Handle*
    fun label = IupLabel(LibC::Char*) : Handle*
    fun list = IupList(LibC::Char*) : Handle*
    fun text = IupText(LibC::Char*) : Handle*
    fun multiline = IupMultiLine(LibC::Char*) : Handle*
    fun toggle = IupToggle(LibC::Char*, LibC::Char*) : Handle*
    fun timer = IupTimer() : Handle*
    fun clipboard = IupClipboard() : Handle*
    fun progress_bar = IupProgressBar() : Handle*
    fun val = IupVal(LibC::Char*) : Handle*
    fun tabs = IupTabs(Handle*) : Handle*
    fun tabsv = IupTabsv(Handle**) : Handle*
    fun flat_tabs = IupFlatTabs(Handle*) : Handle*
    fun flat_tabsv = IupFlatTabsv(Handle**) : Handle*
    fun tree = IupTree() : Handle*
    fun link = IupLink(LibC::Char*, LibC::Char*) : Handle*
    fun animated_label = IupAnimatedLabel(Handle*) : Handle*
    fun date_pick = IupDatePick() : Handle*
    fun calendar = IupCalendar() : Handle*
    fun colorbar = IupColorbar() : Handle*
    fun gauge = IupGauge() : Handle*
    fun dial = IupDial(LibC::Char*) : Handle*
    fun color_browser = IupColorBrowser() : Handle*
    fun spin = IupSpin() : Handle*
    fun spin_box = IupSpinbox(Handle*) : Handle*
    fun string_compare = IupStringCompare(LibC::Char*, LibC::Char*, LibC::Int, LibC::Int) : LibC::Int
    fun save_image_as_text = IupSaveImageAsText(Handle*, LibC::Char*, LibC::Char*, LibC::Char*) : LibC::Int
    fun text_convert_lin_col_to_pos = IupTextConvertLinColToPos(Handle*, LibC::Int, LibC::Int, LibC::Int*) : Void
    fun text_convert_pos_to_lin_col = IupTextConvertPosToLinCol(Handle*, LibC::Int, LibC::Int*, LibC::Int*) : Void
    fun convert_xy_to_pos = IupConvertXYToPos(Handle*, LibC::Int, LibC::Int) : LibC::Int
    fun store_global = IupStoreGlobal(LibC::Char*, LibC::Char*) : Void
    fun store_attribute = IupStoreAttribute(Handle*, LibC::Char*, LibC::Char*) : Void
    fun set_fattribute = IupSetfAttribute(Handle*, LibC::Char*, LibC::Char*) : Void
    fun store_attribute_id = IupStoreAttributeId(Handle*, LibC::Char*, LibC::Int, LibC::Char*) : Void
    fun set_f_attribute_id = IupSetfAttributeId(Handle*, LibC::Char*, LibC::Int, LibC::Char*) : Void
    fun store_attribute_id_2 = IupStoreAttributeId2(Handle*, LibC::Char*, LibC::Int, LibC::Int, LibC::Char*) : Void
    fun set_f_attribute_id_2 = IupSetfAttributeId2(Handle*, LibC::Char*, LibC::Int, LibC::Int, LibC::Char*) : Void
    fun tree_set_user_id = IupTreeSetUserId(Handle*, LibC::Int, Void*) : LibC::Int
    fun tree_get_user_id = IupTreeGetUserId(Handle*, LibC::Int) : Void*
    fun tree_get_id = IupTreeGetId(Handle*, Void*) : LibC::Int
    fun tree_set_attribute_handle = IupTreeSetAttributeHandle(Handle*, LibC::Char*, LibC::Int, Handle*) : Void
    fun file_dialog = IupFileDlg() : Handle*
    fun message_dialog = IupMessageDlg() : Handle*
    fun color_dialog = IupColorDlg() : Handle*
    fun font_dialog = IupFontDlg() : Handle*
    fun progress_dialog = IupProgressDlg() : Handle*
    fun get_file = IupGetFile(LibC::Char*) : LibC::Int
    fun message = IupMessage(LibC::Char*, LibC::Char*) : Void
    fun message_f = IupMessagef(LibC::Char*, LibC::Char*) : Void
    fun message_error = IupMessageError(Handle*, LibC::Char*) : Void
    fun message_alarm = IupMessageAlarm(Handle*, LibC::Char*, LibC::Char*, LibC::Char*) : LibC::Int
    fun alarm = IupAlarm(LibC::Char*, LibC::Char*, LibC::Char*, LibC::Char*, LibC::Char*) : LibC::Int
    fun scanf = IupScanf(LibC::Char*) : LibC::Int
    fun list_dialog = IupListDialog(LibC::Int, LibC::Char*, LibC::Int, LibC::Char**, LibC::Int, LibC::Int, LibC::Int, LibC::Int*) : LibC::Int
    fun get_text = IupGetText(LibC::Char*, LibC::Char*, LibC::Int) : LibC::Int
    fun get_color = IupGetColor(LibC::Int, LibC::Int, LibC::Char*, LibC::Char*, LibC::Char*) : LibC::Int
    alias Iparamcb = (Handle*, LibC::Int, Void*) -> Void
    alias ParameterCallback = Iparamcb
    fun get_param = IupGetParam(LibC::Char*, Iparamcb, Void*, LibC::Char*) : LibC::Int
    fun get_param_v = IupGetParamv(LibC::Char*, Iparamcb, Void*, LibC::Char*, LibC::Int, LibC::Int, Void**) : LibC::Int
    fun param = IupParam(LibC::Char*) : Handle*
    fun param_box = IupParamBox(Handle*) : Handle*
    fun param_box_v = IupParamBoxv(Handle**) : Handle*
    fun layout_dialog = IupLayoutDialog(Handle*) : Handle*
    fun element_properties_dialog = IupElementPropertiesDialog(Handle*) : Handle*
  end
end
